package grn;

import java.util.ArrayList;

import individuals.GEChromosome;

public class GeneHunter {

  /** */
  public static int PROMO_MASK = 0x000000FF;

  /** */
  private static int STARTING_INDEX = -(Gene.SIZE - 2);

  /** */
  private boolean[] found;

  /** */
  private int currentIndex;

  /** */
  private int currentPIndex;

  /** */
  public GEChromosome chromo;

  /** */
  ArrayList<Gene> tfGenes;

  /** */
  ArrayList<Gene> pGenes;

  /**
   *
   */
  public GeneHunter(GEChromosome chromo) {
    this.chromo = chromo;

    tfGenes = new ArrayList<Gene>();
    pGenes = new ArrayList<Gene>();

    found = new boolean[chromo.getLength()];
    currentIndex = STARTING_INDEX;
    currentPIndex = STARTING_INDEX;

    findGenes();
  }

  /**
   *
   */
  public ArrayList<Gene> getTFGenes() {
    return tfGenes;
  }

  /**
   *
   */
  public ArrayList<Gene> getPGenes() {
    return pGenes;
  }

  /**
   *
   */
  private void findGenes() {
    while ((currentIndex = nextPromoter(currentIndex)) > -1)
      if (isAPromotor(currentIndex, Gene.TF_PROMOTER))
        tfGenes.add(getGeneFromPromotorIndex(currentIndex));
      else
        pGenes.add(getGeneFromPromotorIndex(currentIndex));
  }

  /**
   *
   */
  private Gene getGeneFromPromotorIndex(int index) {
    Gene g = new Gene();
    g.enhancer  = chromo.get(index-2);
    g.inhibitor = chromo.get(index-1);
    g.promoter  = chromo.get(index);
    g.codons    = new int[5];

    for (int i = 0; i < 5; i++)
      g.codons[i] = chromo.get(index+1+i);

    return g;
  }

  /**
   *
   *
   * @param
   * @param
   * @return
   */
  private int nextPromoter(int prevIndex) {
    if (prevIndex < 0)
      prevIndex = STARTING_INDEX;

    prevIndex += Gene.SIZE;

    while (++prevIndex < (chromo.getLength() - 5) &&
           ((!isAPromotor(prevIndex, Gene.TF_PROMOTER) &&
             !isAPromotor(prevIndex, Gene.P_PROMOTER)) ||
            (found[prevIndex-2] ||
             found[prevIndex+5])));

    if (prevIndex > chromo.getLength() - 6)
      prevIndex = -1;
    else
      for (int i = prevIndex-2; i < prevIndex+6; i++)
        found[i] = true;

    return prevIndex;
  }


  /**
   *
   *
   * @param
   * @param
   * @return
   */
  private boolean isAPromotor(int index, int mask) {
    return ((chromo.get(index) & PROMO_MASK) ^ mask) == 0;
  }
}
